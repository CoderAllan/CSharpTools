import os
import os.path
import re
 

class Project:
    def __init__(self, projectFilename: str, projectName: str, projectRootPath: str):
        self.ProjectFilename = projectFilename
        self.ProjectName = projectName
        self.ProjectRootPath = projectRootPath
        self.SubProjects = []
        self.TargetFramework = ""
        self.RootNamespace = ""
        self.Packages = []
        self.PackageDictionary = {}
 
def DisplayProject(subProjects: list, projectName: str, indent: int):
    indentation = " " * (indent * 3)
    displayName = projectName.replace(".csproj", "")
    if (len(subProjects) == 0):
        output = f"{indentation}<{displayName}/>\n"
    else:
        output = f"{indentation}<{displayName}>\n"
        for subProject in subProjects:
            result = DisplayProject(subProject.SubProjects, subProject.ProjectName, indent+1)
            output = f"{output}{result}"
        output = f"{output}{indentation}</{displayName}>\n"
    return output
 
# find all files recursively under the current folder that ends with *.sln
solutionFilenames = [os.path.join(dp, f) for dp, dn, filenames in os.walk(".") for f in filenames if f.endswith(".sln")]
projectInSolutions = {}
for solutionFilename in solutionFilenames:
    f = open(solutionFilename)
    solutionName = os.path.basename(solutionFilename)
    line = f.readline() # skip first line that contains BOM info
    line = f.readline()
    while line:
        match = re.match(r".*\".*?\\(.*?\.csproj)\"", line, re.IGNORECASE)
        if match:
            projectFilename = match.group(1)
            if projectFilename in projectInSolutions:
                projectInSolutions[projectFilename] = f"{projectInSolutions[projectFilename]}, {solutionName}"
            else:
                projectInSolutions[projectFilename] = f"{solutionName}"
        line = f.readline()
    f.close()

# find all files recursively under the current folder that ends with *.csproj
projectFilenames = [os.path.join(dp, f) for dp, dn, filenames in os.walk(".") for f in filenames if f.endswith(".csproj")]

projectDictionary = {}
packagesUsedInSolution = []
for projectFilename in projectFilenames:
    projectName = os.path.basename(projectFilename)
    if projectName in projectDictionary:
        currentProject = projectDictionary[projectName]
        currentProject.ProjectFilename = projectFilename
    else:
        currentProject = Project(projectFilename, projectName, "")
    f = open(projectFilename)
    line = f.readline()
    while line:
        match = re.match(r".*<(?:Package)?Reference Include=\"(.*?)\"?,? Version=\"?(.*?)(?:,|\")", line, re.IGNORECASE)
        if match:
            package = match.group(1)
            version = match.group(2)
            currentProject.Packages.append(f"{package}|{version}")
            if not package in packagesUsedInSolution:
                packagesUsedInSolution.append(package)
            currentProject.PackageDictionary[package] = version
        else:
            match = re.match(r".*<RootNamespace>(.*?)</RootNamespace>", line, re.IGNORECASE)
            if match:
                currentProject.RootNamespace = match.group(1)
            else:
              match = re.match(r".*<(?:TargetFramework|TargetFrameworkVersion)>(.*?)</(?:TargetFramework|TargetFrameworkVersion)>", line, re.IGNORECASE)
              if match:
                  currentProject.TargetFramework = match.group(1)
              else:
                  match = re.match(r".*ProjectReference Include=\"(.*)\\(.*?)\"", line, re.IGNORECASE)
                  if match:
                      subProjectName = match.group(2)
                      if subProjectName in projectDictionary:
                          subProject = projectDictionary[subProjectName]
                      else:
                          subProject = Project(f"{match.group(1)}\\{subProjectName}", subProjectName, os.path.dirname(projectFilename))
                          projectDictionary[subProjectName] = subProject
                      if not subProject in currentProject.SubProjects:
                          currentProject.SubProjects.append(subProject)
        line = f.readline()
    f.close()
    if not currentProject.ProjectName in projectDictionary:
        projectDictionary[projectName] = currentProject

# create a readme file for each project
fileFooter = f"This file was autogenerated by the tool: [https://github.com/CoderAllan/CSharpTools/blob/master/ProjectHierarchy.py](https://github.com/CoderAllan/CSharpTools/blob/master/ProjectHierarchy.py)"
projectsInSolution = {}
solutionReadmeContent = {}
solutionReadmeTOC = {}
projectNumber = 1
for projectName in projectDictionary:
    projectHeader = f"Project {projectName}"
    projectBaseInfo = "| | |\n|-|-|\n"\
        f"|Root namespace|{projectDictionary[projectName].RootNamespace}|\n"\
        f"|Target framework| {projectDictionary[projectName].TargetFramework}|"
    projectRoot = os.path.dirname(projectDictionary[projectName].ProjectFilename)
    csharpFiles = [os.path.join(dp, f) for dp, dn, filenames in os.walk(projectRoot) for f in filenames if f.endswith(".cs")]
    projectCSFilenumber = f"|Number of C# files|{len(csharpFiles)}|"
    solutionName = ""
    if projectName in projectInSolutions:
        solutionName = projectInSolutions[projectName]
    projectIncludedIn = f"|Project included in|{solutionName}|"
    if solutionName in projectsInSolution:
        projectsInSolution[solutionName].append(projectName)
    else:
        projectsInSolution[solutionName] = [projectName,]
    packagesUsed = "|Package|Version|\n|-|-|"
    packagesInProject = sorted(projectDictionary[projectName].Packages, key = lambda s: s.lower())
    for package in packagesInProject:
        packagesUsed = f"{packagesUsed}\n|{package}|"
    projectStructure = DisplayProject(projectDictionary[projectName].SubProjects, projectName, 0)
    projectStructure = f"The following structure shows the project hierarchy:\n\n```xml\n{projectStructure}```"
    anchor = projectName.lower().replace(' ', '-')

    newFilename = projectName.replace(".csproj", "")
    outputFilename = projectDictionary[projectName].ProjectFilename.replace(projectName, f"ReadMe-ProjectStructure-{newFilename}.md")
    print(f"Generating ReadMe for project:  {projectName}, filename: {outputFilename}")
    file = open(outputFilename, "w")
    file.write(
        f"# {projectHeader}\n\n"\
        f"{projectBaseInfo}\n"\
        f"{projectCSFilenumber}\n"\
        f"{projectIncludedIn}\n\n"\
        f"## Packages\n\n"\
        f"{packagesUsed}\n\n"\
        f"## Project hierarchy\n\n"\
        f"{projectStructure}\n\n"\
        f"{fileFooter}"
    )
    file.close()
 
    # Create content for solution readme
    # we use the GitHub standard for anchors in the markdown
    projectContent = f"## {projectHeader}<a name=\"{anchor}\"></a>\n\n"\
        f"{projectBaseInfo}\n\n"\
        f"{projectStructure}\n\n"
    if solutionName in solutionReadmeContent:
        solutionReadmeContent[solutionName] = solutionReadmeContent[solutionName] + projectContent
    else:
      solutionReadmeContent[solutionName] = projectContent
    tocEntry = f"|[{projectName}](#{anchor})|{projectDictionary[projectName].RootNamespace}|{projectDictionary[projectName].TargetFramework}|\n"
    if solutionName in solutionReadmeTOC:
        solutionReadmeTOC[solutionName] = solutionReadmeTOC[solutionName] + tocEntry
    else:
        solutionReadmeTOC[solutionName] = f"|Project|Root namespace|Target framework|\n|-|-|-|\n{tocEntry}"
    projectNumber = projectNumber + 1

# create a readme file for each solution file
packagesUsedInSolution = sorted(packagesUsedInSolution, key = lambda s: s.lower())
for solutionName in solutionReadmeContent:
    packageTableSeperator = "|-"
    packageTableHeader = "|Project"
    packageTableBody = ""
    for package in packagesUsedInSolution:
        packageTableHeader = f"{packageTableHeader}|{package}"
        packageTableSeperator = f"{packageTableSeperator}|-"
    for projectName in projectsInSolution[solutionName]:
        packages = projectDictionary[projectName].Packages
        packageTableBody = f"{packageTableBody}|{projectName}"
        for package in packagesUsedInSolution:
            if package in projectDictionary[projectName].PackageDictionary:
                packageTableBody = f"{packageTableBody}|{projectDictionary[projectName].PackageDictionary[package]}"
            else:
                packageTableBody = f"{packageTableBody}|"
        packageTableBody = f"{packageTableBody}|\n"
    packageTable = f"{packageTableHeader}|\n{packageTableSeperator}|\n{packageTableBody}|\n\n"
    newFilename = solutionName.replace(".sln", "")
    outputFilename = f"ReadMe-SolutionStructure-{newFilename}.md"
    print(f"Generating ReadMe for solution: {solutionName}, filename: {outputFilename}")
    file = open(outputFilename, "w")
    file.write(
        f"# {solutionName}\n\n"\
        f"## Projects\n\n{solutionReadmeTOC[solutionName]}\n"\
        f"## Packages\n\n"\
        f"{packageTable}"\
        f"{solutionReadmeContent[solutionName]}"\
        f"{fileFooter}"
    )
    file.close()
